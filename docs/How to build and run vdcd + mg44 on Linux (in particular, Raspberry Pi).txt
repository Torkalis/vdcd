# Prepare
# =======

# install needed packages
sudo apt-get install g++ git autoconf automake libtool
sudo apt-get install libjson0-dev protobuf-c-compiler libprotobuf-c0-dev libssl-dev libsqlite3-dev libi2c-dev
sudo apt-get install libboost-dev

# on older linux, e.g. Ubuntu 14.04 LTS, protobuf-c still goes into a "google" subfolder, so we need a softlink
sudo ln -s /usr/include/google/protobuf-c /usr/include/protobuf-c

# create a project directory
mkdir <project dir of your choice>
cd <project dir of your choice>

# clone the git repositories
git clone -b master git@github.com:plan44/vdcd.git vdcd
git clone -b master git@github.com:plan44/libmongoose.git libmongoose
git clone -b master git@github.com:plan44/mg44.git mg44

# Note: to get the most recent beta stuff, consider checking out "luz" branch instead of "master"


# Build
# =====

cd <project dir of your choice>

# vdcd
pushd vdcd
autoreconf -fi
./configure
# note: need make clean to force rebuilding protobuf-c generated files (which are checked-in for bulding on devices w/o protoc)
make clean
# note: First build must be make all, because otherwise *.proto derived sources are not generated.
make all
sudo make install
popd

# mongoose44/libmongoose
pushd libmongoose
git checkout luz
autoreconf -fi
./configure
make
sudo make install
popd

# mg44
pushd mg44
autoreconf -fi
./configure
make
sudo make install
popd


# Run
# ===

# the mg44 web server in minimal configuration
# Note: the directory specified for -document_root will be accessible from the web!
# if webdir does not yet exist:
sudo mkdir /var/www
# run it
mg44 -document_root /var/www -listening_ports 8080 -jsonapi_path /api/json/ -jsonapi_host localhost -jsonapi_port 8090


# the vdcd with each a console input and a console output device
vdcd --cfgapiport 8090 -k testin:button -k testout:dimmer -l 7

# the vdcd with an enocean gateway
vdcd --cfgapiport 8090 --enocean <ip_of_enocean_gateway>:<portno> -l 7


# Use API
# =======

# send API request to http:://localhost:8080 to issue API requests, e.g.

# - list of all device classes
http://localhost:8080/api/json/vdc?method=getProperty&name=x-p44-vdcs&dSUID=root

# - list of all devices of a class
http://localhost:8080/api/json/vdc?method=getProperty&name=x-p44-devices&dSUID=<device class dSUID>

# - list of all properties of a device
http://localhost:8080/api/json/vdc?method=getProperty&name=*&dSUID=<device dSUID>

# - set vdcd to enOcean learn mode for max 30 seconds:
http://localhost:8080/api/json/p44?method=learn&seconds=30
#   will return timeout, true (=learned device) or false (=unlearned device)






